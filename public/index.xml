<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Hugo website</title>
    <link>/</link>
    <description>Recent content on A Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Jan 2020 21:48:51 -0700</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Book</title>
      <link>/book/</link>
      <pubDate>Fri, 03 Jan 2020 21:48:51 -0700</pubDate>
      
      <guid>/book/</guid>
      <description>Origin Site.</description>
    </item>
    
    <item>
      <title>4-1.GET &amp; POST </title>
      <link>/2020/01/03/4-1-get-post/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/01/03/4-1-get-post/</guid>
      <description>Figure 1: A captionCrawling크롤링에는 GET 과 POST 크게2가지 방식이 있다.
GET 방식은 인터넷 주소를 기준으로 이에 해당하는 데이터나 파일을 요청하는 것이다. 주로 클라이언트가 요청하는 쿼리를 앰퍼샌드(&amp;amp;) 혹은 물음표(?) 형식으로 결합해 서버에 전달한다.
POST 방식은 사용자가 필요한 값을 추가해서 요청하는 방법입니다. GET 방식과 달리 클라이언트가 요청하는 쿼리를 body에 넣어서 전송하므로 요청 내역을 직접 볼 수 없다.
httr, rvest Packages금융속보 크롤링 (GET)Figure 2: A captionlibrary(httr)library(rvest)url = &amp;quot;https://finance.</description>
    </item>
    
    <item>
      <title>OLD.1</title>
      <link>/2019/12/22/step-1/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/12/22/step-1/</guid>
      <description>Quantmod packagelibrary(quantmod)quantmod package 를 설치하고 주가를 불러오는 함수getSymbols() 를 사용해보자. 주식코드번호에 코스피면 .KS,코스닥이면 .KQ 을 붙이면 된다. 최애주인 SK이노베이션으로 해보자.
stock&amp;lt;-getSymbols(Symbols = &amp;quot;096770.KS&amp;quot;,from= &amp;quot;2017-04-03&amp;quot;,to = &amp;quot;2017-04-07&amp;quot;,auto.assign = FALSE)stock## 096770.KS.Open 096770.KS.High 096770.KS.Low 096770.KS.Close## 2017-04-03 167000 168500 165500 166000## 2017-04-04 165500 166000 161000 163000## 2017-04-05 164500 165500 162500 163500## 2017-04-06 163000 164500 161000 162500## 2017-04-07 163500 165000 162500 164500## 096770.</description>
    </item>
    
    <item>
      <title>OLD.2</title>
      <link>/2019/12/22/old-2/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/12/22/old-2/</guid>
      <description>종목코드 크롤링한국거래소에서 종목코드를 가져오기 위하여 크롤링방법이 필요하다.전부 해당사이트 나와있는 방법을 그대로 따라한 것이다. 최근에 책으로 완성된 사이트이며, 사실 내가 하고싶은 대부분이 이책에 들어가있다.
2가지 패키지를 설치한다.
library(httr)library(rvest)httr 패키지는 데이터를 얻고자 하는 사이트에 GET 과 POST 2가지 방식으로 데이터를 요청하여 가져온다.rvest 는 가져온 html 데이터를 분해하여 필요한 부분만 추출하는데 사용된다. 역시 자세한 설명은 위에 소개한 사이트의 챔터4를 참고하면 된다.
한국거래소 의 산업별 현황 테이블을 가져오기 위해서는 2가지 단계가 필요하다.</description>
    </item>
    
    <item>
      <title>OLD.3</title>
      <link>/2019/12/22/old-3/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/12/22/old-3/</guid>
      <description>최신영업일 가져오기해당사이트 에서 방법을 가져와서 정리한 것
네이버금융의 최신영업일 가져오는 것을 해보겠다.저번시간엔 httr 의 GET, POST 방법으로 html 데이터를 가져온 뒤, rvest 로 필요한 데이터를 가져왔다. 이번에는 Xpath 를 이용하여 가져와보자.
이전과 같이 2가지 패키지를 불러온다.크롬에서 복사한 xpath 를 직접 넣어주면 된다.
library(httr)library(rvest)url=&amp;#39;https://finance.naver.com/sise/sise_deposit.nhn&amp;#39;biz_day = GET(url) %&amp;gt;% read_html(encoding = &amp;#39;EUC-KR&amp;#39;) %&amp;gt;% html_nodes(xpath=&amp;#39;//*[@id=&amp;quot;type_0&amp;quot;]/div/ul[2]/li/span&amp;#39;) %&amp;gt;% html_text()print(biz_day)## [1] &amp;quot;&amp;lt;U+00A0&amp;gt;&amp;lt;U+00A0&amp;gt;|&amp;lt;U+00A0&amp;gt;&amp;lt;U+00A0&amp;gt;2019.12.18&amp;quot;우리가 원하는 형태로 date = &#39;20190807&#39; 변경하기 위하여,stringr 패키지를 설치 후 불러온다.</description>
    </item>
    
    <item>
      <title>OLD.4</title>
      <link>/2019/12/22/old-4/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/12/22/old-4/</guid>
      <description>모든기업 주가가져오기2장에서 한국거래소에서 가져온 종목코드로,1장에서 종목코드로 주가정보를 가져오는 방법에 적용시켜보자.
{r} # # # CODE = read.csv(&#39;C:/Users/elanv/OneDrive/Documents/blog2/content/post/data/krx_sector.csv&#39;) # head(CODE) # # TEST_CODE = CODE[3,]$종목코드 #그전에,getSymbols 로 월별 주식을 가져와서, 컬럼명을 변경해주는 함수를 하나 만들자.```{r}library(quantmod)library(dplyr)getData&amp;lt;-function(x,from,to){if(missing (from)){stock &amp;lt;- getSymbols(paste0(x,“.KS”),auto.assign = F,periodicity = “monthly”)}else if(missing(to)){stock &amp;lt;- getSymbols(paste0(x,“.</description>
    </item>
    
    <item>
      <title>A Plain Markdown Post</title>
      <link>/2016/12/30/a-plain-markdown-post/</link>
      <pubDate>Fri, 30 Dec 2016 21:49:57 -0700</pubDate>
      
      <guid>/2016/12/30/a-plain-markdown-post/</guid>
      <description>This is a post written in plain Markdown (*.md) instead of R Markdown (*.Rmd). The major differences are:
 You cannot run any R code in a plain Markdown document, whereas in an R Markdown document, you can embed R code chunks (```{r}); A plain Markdown post is rendered through Blackfriday, and an R Markdown document is compiled by rmarkdown and Pandoc.  There are many differences in syntax between Blackfriday&#39;s Markdown and Pandoc&#39;s Markdown.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 05 May 2016 21:48:51 -0700</pubDate>
      
      <guid>/about/</guid>
      <description>This is a &amp;ldquo;hello world&amp;rdquo; example website for the blogdown package. The theme was forked from @jrutheiser/hugo-lithium-theme and modified by Yihui Xie.</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/2015/07/23/hello-r-markdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/2015/07/23/hello-r-markdown/</guid>
      <description>R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars)## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
    <item>
      <title>Lorem Ipsum</title>
      <link>/2015/01/01/lorem-ipsum/</link>
      <pubDate>Thu, 01 Jan 2015 13:09:13 -0600</pubDate>
      
      <guid>/2015/01/01/lorem-ipsum/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
  </channel>
</rss>